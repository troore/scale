package scale.frontend.fortran;

/**
 * This class defines the Fortran intrinsic function names.
 * <b>Do not edit.</b>
 * <p>
 * Copyright 2006 by the <a href="http://ali-www.cs.umass.edu/">Scale Compiler Group</a>,<br>
 * <a href="http://www.cs.umass.edu/">Department of Computer Science</a><br>
 * Amherst MA. 01003, USA<br>
 * All Rights Reserved.<br>
 * <p>
 * This file is generated by the MK class.
 */

public final class Intrinsics
{
  public static final int NA                  = 0;
  public static final int ABS                 = 1;
  public static final int ACHAR               = 2;
  public static final int ACOS                = 3;
  public static final int ADJUSTL             = 4;
  public static final int ADJUSTR             = 5;
  public static final int AIMAG               = 6;
  public static final int AINT                = 7;
  public static final int ALL                 = 8;
  public static final int ALLOCATED           = 9;
  public static final int ALOG                = 10;
  public static final int ALOG10              = 11;
  public static final int AMAX0               = 12;
  public static final int AMAX1               = 13;
  public static final int AMIN0               = 14;
  public static final int AMIN1               = 15;
  public static final int AMOD                = 16;
  public static final int ANINT               = 17;
  public static final int ANY                 = 18;
  public static final int ASIN                = 19;
  public static final int ASSOCIATED          = 20;
  public static final int ATAN                = 21;
  public static final int ATAN2               = 22;
  public static final int BIT_SIZE            = 23;
  public static final int BTEST               = 24;
  public static final int CABS                = 25;
  public static final int CCOS                = 26;
  public static final int CDABS               = 27;
  public static final int CEILING             = 28;
  public static final int CEXP                = 29;
  public static final int CHAR                = 30;
  public static final int CLOG                = 31;
  public static final int CMPLX               = 32;
  public static final int CONJG               = 33;
  public static final int COS                 = 34;
  public static final int COSH                = 35;
  public static final int COUNT               = 36;
  public static final int CSHIFT              = 37;
  public static final int CSIN                = 38;
  public static final int CSQRT               = 39;
  public static final int DABS                = 40;
  public static final int DACOS               = 41;
  public static final int DASIN               = 42;
  public static final int DATAN               = 43;
  public static final int DATAN2              = 44;
  public static final int DBLE                = 45;
  public static final int DCMPLX              = 46;
  public static final int DCONJG              = 47;
  public static final int DCOS                = 48;
  public static final int DCOSH               = 49;
  public static final int DDIM                = 50;
  public static final int DEXP                = 51;
  public static final int DFLOAT              = 52;
  public static final int DIGITS              = 53;
  public static final int DIM                 = 54;
  public static final int DIMAG               = 55;
  public static final int DINT                = 56;
  public static final int DLOG                = 57;
  public static final int DLOG10              = 58;
  public static final int DMAX1               = 59;
  public static final int DMIN1               = 60;
  public static final int DMOD                = 61;
  public static final int DNINT               = 62;
  public static final int DOT_PRODUCT         = 63;
  public static final int DPROD               = 64;
  public static final int DSIGN               = 65;
  public static final int DSIN                = 66;
  public static final int DSINH               = 67;
  public static final int DSQRT               = 68;
  public static final int DTAN                = 69;
  public static final int DTANH               = 70;
  public static final int EOSHIFT             = 71;
  public static final int EPSILON             = 72;
  public static final int EXP                 = 73;
  public static final int EXPONENT            = 74;
  public static final int FLOAT               = 75;
  public static final int FLOOR               = 76;
  public static final int FRACTION            = 77;
  public static final int HUGE                = 78;
  public static final int IABS                = 79;
  public static final int IACHAR              = 80;
  public static final int IAND                = 81;
  public static final int IBCLR               = 82;
  public static final int IBITS               = 83;
  public static final int IBSET               = 84;
  public static final int ICHAR               = 85;
  public static final int IDIM                = 86;
  public static final int IDFIX               = 87;
  public static final int IDINT               = 88;
  public static final int IDNINT              = 89;
  public static final int IEOR                = 90;
  public static final int IFIX                = 91;
  public static final int INDEX               = 92;
  public static final int INT                 = 93;
  public static final int IOR                 = 94;
  public static final int ISHFT               = 95;
  public static final int ISHFTC              = 96;
  public static final int ISIGN               = 97;
  public static final int KIND                = 98;
  public static final int LBOUND              = 99;
  public static final int LEN                 = 100;
  public static final int LEN_TRIM            = 101;
  public static final int LGE                 = 102;
  public static final int LGT                 = 103;
  public static final int LLE                 = 104;
  public static final int LLT                 = 105;
  public static final int LOG                 = 106;
  public static final int LOG10               = 107;
  public static final int LOGICAL             = 108;
  public static final int MATMUL              = 109;
  public static final int MAX                 = 110;
  public static final int MAX0                = 111;
  public static final int MAX1                = 112;
  public static final int MAXEXPONENT         = 113;
  public static final int MAXLOC              = 114;
  public static final int MAXVAL              = 115;
  public static final int MERGE               = 116;
  public static final int MIN                 = 117;
  public static final int MIN0                = 118;
  public static final int MIN1                = 119;
  public static final int MINEXPONENT         = 120;
  public static final int MINLOC              = 121;
  public static final int MINVAL              = 122;
  public static final int MOD                 = 123;
  public static final int MODULO              = 124;
  public static final int NEAREST             = 125;
  public static final int NINT                = 126;
  public static final int NOT                 = 127;
  public static final int NULL                = 128;
  public static final int PACK                = 129;
  public static final int PRECISION           = 130;
  public static final int PRESENT             = 131;
  public static final int PRODUCT             = 132;
  public static final int RADIX               = 133;
  public static final int RANGE               = 134;
  public static final int REAL                = 135;
  public static final int REPEAT              = 136;
  public static final int RESHAPE             = 137;
  public static final int RRSPACING           = 138;
  public static final int SCALE               = 139;
  public static final int SCAN                = 140;
  public static final int SELECTED_INT_KIND   = 141;
  public static final int SELECTED_REAL_KIND  = 142;
  public static final int SET_EXPONENT        = 143;
  public static final int SHAPE               = 144;
  public static final int SIGN                = 145;
  public static final int SIN                 = 146;
  public static final int SINH                = 147;
  public static final int SIZE                = 148;
  public static final int SNGL                = 149;
  public static final int SPACING             = 150;
  public static final int SPREAD              = 151;
  public static final int SQRT                = 152;
  public static final int SUM                 = 153;
  public static final int TAN                 = 154;
  public static final int TANH                = 155;
  public static final int TINY                = 156;
  public static final int TRANSFER            = 157;
  public static final int TRANSPOSE           = 158;
  public static final int UBOUND              = 159;
  public static final int UNPACK              = 160;
  public static final int VERIFY              = 161;

  public static final String[] intrinsics = {
    "??",                 "abs",                "achar",              "acos",               
    "adjustl",            "adjustr",            "aimag",              "aint",               
    "all",                "allocated",          "alog",               "alog10",             
    "amax0",              "amax1",              "amin0",              "amin1",              
    "amod",               "anint",              "any",                "asin",               
    "associated",         "atan",               "atan2",              "bit_size",           
    "btest",              "cabs",               "ccos",               "cdabs",              
    "ceiling",            "cexp",               "char",               "clog",               
    "cmplx",              "conjg",              "cos",                "cosh",               
    "count",              "cshift",             "csin",               "csqrt",              
    "dabs",               "dacos",              "dasin",              "datan",              
    "datan2",             "dble",               "dcmplx",             "dconjg",             
    "dcos",               "dcosh",              "ddim",               "dexp",               
    "dfloat",             "digits",             "dim",                "dimag",              
    "dint",               "dlog",               "dlog10",             "dmax1",              
    "dmin1",              "dmod",               "dnint",              "dot_product",        
    "dprod",              "dsign",              "dsin",               "dsinh",              
    "dsqrt",              "dtan",               "dtanh",              "eoshift",            
    "epsilon",            "exp",                "exponent",           "float",              
    "floor",              "fraction",           "huge",               "iabs",               
    "iachar",             "iand",               "ibclr",              "ibits",              
    "ibset",              "ichar",              "idim",               "idfix",              
    "idint",              "idnint",             "ieor",               "ifix",               
    "index",              "int",                "ior",                "ishft",              
    "ishftc",             "isign",              "kind",               "lbound",             
    "len",                "len_trim",           "lge",                "lgt",                
    "lle",                "llt",                "log",                "log10",              
    "logical",            "matmul",             "max",                "max0",               
    "max1",               "maxexponent",        "maxloc",             "maxval",             
    "merge",              "min",                "min0",               "min1",               
    "minexponent",        "minloc",             "minval",             "mod",                
    "modulo",             "nearest",            "nint",               "not",                
    "null",               "pack",               "precision",          "present",            
    "product",            "radix",              "range",              "real",               
    "repeat",             "reshape",            "rrspacing",          "scale",              
    "scan",               "selected_int_kind",  "selected_real_kind", "set_exponent",       
    "shape",              "sign",               "sin",                "sinh",               
    "size",               "sngl",               "spacing",            "spread",             
    "sqrt",               "sum",                "tan",                "tanh",               
    "tiny",               "transfer",           "transpose",          "ubound",             
    "unpack",             "verify",             
  };

  public static final int[] intrinsicLengths = {
     0,  3,  5,  4,  7,  7,  5,  4,  3,  9,  4,  6,  5,  5,  5,  5, 
     4,  5,  3,  4, 10,  4,  5,  8,  5,  4,  4,  5,  7,  4,  4,  4, 
     5,  5,  3,  4,  5,  6,  4,  5,  4,  5,  5,  5,  6,  4,  6,  6, 
     4,  5,  4,  4,  6,  6,  3,  5,  4,  4,  6,  5,  5,  4,  5, 11, 
     5,  5,  4,  5,  5,  4,  5,  7,  7,  3,  8,  5,  5,  8,  4,  4, 
     6,  4,  5,  5,  5,  5,  4,  5,  5,  6,  4,  4,  5,  3,  3,  5, 
     6,  5,  4,  6,  3,  8,  3,  3,  3,  3,  3,  5,  7,  6,  3,  4, 
     4, 11,  6,  6,  5,  3,  4,  4, 11,  6,  6,  3,  6,  7,  4,  3, 
     4,  4,  9,  7,  7,  5,  5,  4,  6,  7,  9,  5,  4, 17, 18, 12, 
     5,  4,  3,  4,  4,  4,  7,  6,  4,  3,  3,  4,  4,  8,  9,  6, 
     6,  6, 
  };

  public static final short[] minArgs = {
    /*   0 */ 0, 1, 1, 1, 1, 1, 1, 1, 
    /*   8 */ 1, 1, 1, 1, 2, 2, 2, 2, 
    /*  16 */ 2, 1, 1, 1, 1, 1, 2, 1, 
    /*  24 */ 2, 1, 1, 1, 1, 1, 1, 1, 
    /*  32 */ 1, 1, 1, 1, 1, 2, 1, 1, 
    /*  40 */ 1, 1, 1, 1, 2, 1, 1, 1, 
    /*  48 */ 1, 1, 2, 1, 1, 1, 2, 1, 
    /*  56 */ 1, 1, 1, 2, 2, 2, 1, 2, 
    /*  64 */ 2, 2, 1, 1, 1, 1, 1, 2, 
    /*  72 */ 1, 1, 1, 1, 1, 1, 1, 1, 
    /*  80 */ 1, 2, 2, 3, 2, 1, 2, 1, 
    /*  88 */ 1, 1, 1, 1, 2, 1, 2, 2, 
    /*  96 */ 2, 2, 1, 1, 1, 1, 2, 2, 
    /* 104 */ 2, 2, 1, 1, 1, 2, 1, 1, 
    /* 112 */ 1, 1, 1, 1, 2, 1, 1, 1, 
    /* 120 */ 1, 1, 1, 2, 2, 1, 1, 1, 
    /* 128 */ 0, 2, 1, 1, 1, 1, 1, 1, 
    /* 136 */ 1, 2, 1, 2, 1, 1, 2, 2, 
    /* 144 */ 1, 2, 1, 1, 1, 1, 1, 2, 
    /* 152 */ 1, 1, 1, 1, 1, 2, 1, 1, 
    /* 160 */ 2, 1, 
  };

  public static final short[] maxArgs = {
    /*   0 */    0,    1,    1,    1,    1,    1,    1,    1, 
    /*   8 */    2,    1,    1,    1, 1000, 1000, 1000, 1000, 
    /*  16 */    2,    1,    2,    1,    1,    1,    2,    1, 
    /*  24 */    2,    1,    1,    1,    1,    1,    1,    1, 
    /*  32 */    2,    1,    1,    1,    1,    2,    1,    1, 
    /*  40 */    1,    1,    1,    1,    2,    1,    2,    1, 
    /*  48 */    1,    1,    2,    1,    1,    1,    2,    1, 
    /*  56 */    1,    1,    1, 1000, 1000,    2,    1,    2, 
    /*  64 */    2,    2,    1,    1,    1,    1,    1,    2, 
    /*  72 */    1,    1,    1,    1,    1,    1,    1,    1, 
    /*  80 */    1,    2,    2,    3,    2,    1,    2,    1, 
    /*  88 */    1,    1,    1,    1,    2,    1,    2,    2, 
    /*  96 */    2,    2,    1,    1,    1,    1,    2,    2, 
    /* 104 */    2,    2,    1,    1,    2,    2, 1000, 1000, 
    /* 112 */ 1000,    1,    1,    3,    2, 1000, 1000, 1000, 
    /* 120 */    1,    1,    3,    2,    2,    1,    1,    1, 
    /* 128 */    0,    2,    1,    1,    1,    1,    1,    1, 
    /* 136 */    1,    2,    1,    2,    1,    1,    2,    2, 
    /* 144 */    1,    2,    1,    1,    1,    1,    1,    2, 
    /* 152 */    1,    1,    1,    1,    1,    3,    1,    1, 
    /* 160 */    2,    1, 
  };

  private static final char[] firstChar = {
       4,  260,  304,  492,  864,  940,    0,  992, 
    1004,    0, 1228, 1240, 1344, 1540,    0, 1596, 
       0, 1676, 1784, 2060, 2128, 2168,    0,    0, 
       0,    0, 
  };

  private static final char[] bag = {
    /*    0 */ ' ',    0,    0, 0,
    /*    4 */ 'b',   12,    8, 0,
    /*    8 */ 's',    0,    0, ABS,
    /*   12 */ 'c',   36,   16, 0,
    /*   16 */ 'h',   28,   20, 0,
    /*   20 */ 'a',    0,   24, 0,
    /*   24 */ 'r',    0,    0, ACHAR,
    /*   28 */ 'o',    0,   32, 0,
    /*   32 */ 's',    0,    0, ACOS,
    /*   36 */ 'd',   64,   40, 0,
    /*   40 */ 'j',    0,   44, 0,
    /*   44 */ 'u',    0,   48, 0,
    /*   48 */ 's',    0,   52, 0,
    /*   52 */ 't',    0,   56, 0,
    /*   56 */ 'l',   60,    0, ADJUSTL,
    /*   60 */ 'r',    0,    0, ADJUSTR,
    /*   64 */ 'i',   88,   68, 0,
    /*   68 */ 'm',   80,   72, 0,
    /*   72 */ 'a',    0,   76, 0,
    /*   76 */ 'g',    0,    0, AIMAG,
    /*   80 */ 'n',    0,   84, 0,
    /*   84 */ 't',    0,    0, AINT,
    /*   88 */ 'l',  136,   92, 0,
    /*   92 */ 'l',  120,   96, ALL,
    /*   96 */ 'o',    0,  100, 0,
    /*  100 */ 'c',    0,  104, 0,
    /*  104 */ 'a',    0,  108, 0,
    /*  108 */ 't',    0,  112, 0,
    /*  112 */ 'e',    0,  116, 0,
    /*  116 */ 'd',    0,    0, ALLOCATED,
    /*  120 */ 'o',    0,  124, 0,
    /*  124 */ 'g',    0,  128, ALOG,
    /*  128 */ '1',    0,  132, 0,
    /*  132 */ '0',    0,    0, ALOG10,
    /*  136 */ 'm',  180,  140, 0,
    /*  140 */ 'a',  156,  144, 0,
    /*  144 */ 'x',    0,  148, 0,
    /*  148 */ '0',  152,    0, AMAX0,
    /*  152 */ '1',    0,    0, AMAX1,
    /*  156 */ 'i',  172,  160, 0,
    /*  160 */ 'n',    0,  164, 0,
    /*  164 */ '0',  168,    0, AMIN0,
    /*  168 */ '1',    0,    0, AMIN1,
    /*  172 */ 'o',    0,  176, 0,
    /*  176 */ 'd',    0,    0, AMOD,
    /*  180 */ 'n',  200,  184, 0,
    /*  184 */ 'i',  196,  188, 0,
    /*  188 */ 'n',    0,  192, 0,
    /*  192 */ 't',    0,    0, ANINT,
    /*  196 */ 'y',    0,    0, ANY,
    /*  200 */ 's',  244,  204, 0,
    /*  204 */ 'i',  212,  208, 0,
    /*  208 */ 'n',    0,    0, ASIN,
    /*  212 */ 's',    0,  216, 0,
    /*  216 */ 'o',    0,  220, 0,
    /*  220 */ 'c',    0,  224, 0,
    /*  224 */ 'i',    0,  228, 0,
    /*  228 */ 'a',    0,  232, 0,
    /*  232 */ 't',    0,  236, 0,
    /*  236 */ 'e',    0,  240, 0,
    /*  240 */ 'd',    0,    0, ASSOCIATED,
    /*  244 */ 't',    0,  248, 0,
    /*  248 */ 'a',    0,  252, 0,
    /*  252 */ 'n',    0,  256, ATAN,
    /*  256 */ '2',    0,    0, ATAN2,
    /*  260 */ 'i',  288,  264, 0,
    /*  264 */ 't',    0,  268, 0,
    /*  268 */ '_',    0,  272, 0,
    /*  272 */ 's',    0,  276, 0,
    /*  276 */ 'i',    0,  280, 0,
    /*  280 */ 'z',    0,  284, 0,
    /*  284 */ 'e',    0,    0, BIT_SIZE,
    /*  288 */ 't',    0,  292, 0,
    /*  292 */ 'e',    0,  296, 0,
    /*  296 */ 's',    0,  300, 0,
    /*  300 */ 't',    0,    0, BTEST,
    /*  304 */ 'a',  316,  308, 0,
    /*  308 */ 'b',    0,  312, 0,
    /*  312 */ 's',    0,    0, CABS,
    /*  316 */ 'c',  328,  320, 0,
    /*  320 */ 'o',    0,  324, 0,
    /*  324 */ 's',    0,    0, CCOS,
    /*  328 */ 'd',  344,  332, 0,
    /*  332 */ 'a',    0,  336, 0,
    /*  336 */ 'b',    0,  340, 0,
    /*  340 */ 's',    0,    0, CDABS,
    /*  344 */ 'e',  376,  348, 0,
    /*  348 */ 'i',  368,  352, 0,
    /*  352 */ 'l',    0,  356, 0,
    /*  356 */ 'i',    0,  360, 0,
    /*  360 */ 'n',    0,  364, 0,
    /*  364 */ 'g',    0,    0, CEILING,
    /*  368 */ 'x',    0,  372, 0,
    /*  372 */ 'p',    0,    0, CEXP,
    /*  376 */ 'h',  388,  380, 0,
    /*  380 */ 'a',    0,  384, 0,
    /*  384 */ 'r',    0,    0, CHAR,
    /*  388 */ 'l',  400,  392, 0,
    /*  392 */ 'o',    0,  396, 0,
    /*  396 */ 'g',    0,    0, CLOG,
    /*  400 */ 'm',  416,  404, 0,
    /*  404 */ 'p',    0,  408, 0,
    /*  408 */ 'l',    0,  412, 0,
    /*  412 */ 'x',    0,    0, CMPLX,
    /*  416 */ 'o',  452,  420, 0,
    /*  420 */ 'n',  432,  424, 0,
    /*  424 */ 'j',    0,  428, 0,
    /*  428 */ 'g',    0,    0, CONJG,
    /*  432 */ 's',  440,  436, COS,
    /*  436 */ 'h',    0,    0, COSH,
    /*  440 */ 'u',    0,  444, 0,
    /*  444 */ 'n',    0,  448, 0,
    /*  448 */ 't',    0,    0, COUNT,
    /*  452 */ 's',    0,  456, 0,
    /*  456 */ 'h',  472,  460, 0,
    /*  460 */ 'i',    0,  464, 0,
    /*  464 */ 'f',    0,  468, 0,
    /*  468 */ 't',    0,    0, CSHIFT,
    /*  472 */ 'i',  480,  476, 0,
    /*  476 */ 'n',    0,    0, CSIN,
    /*  480 */ 'q',    0,  484, 0,
    /*  484 */ 'r',    0,  488, 0,
    /*  488 */ 't',    0,    0, CSQRT,
    /*  492 */ 'a',  544,  496, 0,
    /*  496 */ 'b',  504,  500, 0,
    /*  500 */ 's',    0,    0, DABS,
    /*  504 */ 'c',  516,  508, 0,
    /*  508 */ 'o',    0,  512, 0,
    /*  512 */ 's',    0,    0, DACOS,
    /*  516 */ 's',  528,  520, 0,
    /*  520 */ 'i',    0,  524, 0,
    /*  524 */ 'n',    0,    0, DASIN,
    /*  528 */ 't',    0,  532, 0,
    /*  532 */ 'a',    0,  536, 0,
    /*  536 */ 'n',    0,  540, DATAN,
    /*  540 */ '2',    0,    0, DATAN2,
    /*  544 */ 'b',  556,  548, 0,
    /*  548 */ 'l',    0,  552, 0,
    /*  552 */ 'e',    0,    0, DBLE,
    /*  556 */ 'c',  600,  560, 0,
    /*  560 */ 'm',  576,  564, 0,
    /*  564 */ 'p',    0,  568, 0,
    /*  568 */ 'l',    0,  572, 0,
    /*  572 */ 'x',    0,    0, DCMPLX,
    /*  576 */ 'o',    0,  580, 0,
    /*  580 */ 'n',  592,  584, 0,
    /*  584 */ 'j',    0,  588, 0,
    /*  588 */ 'g',    0,    0, DCONJG,
    /*  592 */ 's',    0,  596, DCOS,
    /*  596 */ 'h',    0,    0, DCOSH,
    /*  600 */ 'd',  612,  604, 0,
    /*  604 */ 'i',    0,  608, 0,
    /*  608 */ 'm',    0,    0, DDIM,
    /*  612 */ 'e',  624,  616, 0,
    /*  616 */ 'x',    0,  620, 0,
    /*  620 */ 'p',    0,    0, DEXP,
    /*  624 */ 'f',  644,  628, 0,
    /*  628 */ 'l',    0,  632, 0,
    /*  632 */ 'o',    0,  636, 0,
    /*  636 */ 'a',    0,  640, 0,
    /*  640 */ 't',    0,    0, DFLOAT,
    /*  644 */ 'i',  684,  648, 0,
    /*  648 */ 'g',  664,  652, 0,
    /*  652 */ 'i',    0,  656, 0,
    /*  656 */ 't',    0,  660, 0,
    /*  660 */ 's',    0,    0, DIGITS,
    /*  664 */ 'm',  676,  668, DIM,
    /*  668 */ 'a',    0,  672, 0,
    /*  672 */ 'g',    0,    0, DIMAG,
    /*  676 */ 'n',    0,  680, 0,
    /*  680 */ 't',    0,    0, DINT,
    /*  684 */ 'l',  704,  688, 0,
    /*  688 */ 'o',    0,  692, 0,
    /*  692 */ 'g',    0,  696, DLOG,
    /*  696 */ '1',    0,  700, 0,
    /*  700 */ '0',    0,    0, DLOG10,
    /*  704 */ 'm',  740,  708, 0,
    /*  708 */ 'a',  720,  712, 0,
    /*  712 */ 'x',    0,  716, 0,
    /*  716 */ '1',    0,    0, DMAX1,
    /*  720 */ 'i',  732,  724, 0,
    /*  724 */ 'n',    0,  728, 0,
    /*  728 */ '1',    0,    0, DMIN1,
    /*  732 */ 'o',    0,  736, 0,
    /*  736 */ 'd',    0,    0, DMOD,
    /*  740 */ 'n',  756,  744, 0,
    /*  744 */ 'i',    0,  748, 0,
    /*  748 */ 'n',    0,  752, 0,
    /*  752 */ 't',    0,    0, DNINT,
    /*  756 */ 'o',  796,  760, 0,
    /*  760 */ 't',    0,  764, 0,
    /*  764 */ '_',    0,  768, 0,
    /*  768 */ 'p',    0,  772, 0,
    /*  772 */ 'r',    0,  776, 0,
    /*  776 */ 'o',    0,  780, 0,
    /*  780 */ 'd',    0,  784, 0,
    /*  784 */ 'u',    0,  788, 0,
    /*  788 */ 'c',    0,  792, 0,
    /*  792 */ 't',    0,    0, DOT_PRODUCT,
    /*  796 */ 'p',  812,  800, 0,
    /*  800 */ 'r',    0,  804, 0,
    /*  804 */ 'o',    0,  808, 0,
    /*  808 */ 'd',    0,    0, DPROD,
    /*  812 */ 's',  848,  816, 0,
    /*  816 */ 'i',  836,  820, 0,
    /*  820 */ 'g',  828,  824, 0,
    /*  824 */ 'n',    0,    0, DSIGN,
    /*  828 */ 'n',    0,  832, DSIN,
    /*  832 */ 'h',    0,    0, DSINH,
    /*  836 */ 'q',    0,  840, 0,
    /*  840 */ 'r',    0,  844, 0,
    /*  844 */ 't',    0,    0, DSQRT,
    /*  848 */ 't',    0,  852, 0,
    /*  852 */ 'a',    0,  856, 0,
    /*  856 */ 'n',    0,  860, DTAN,
    /*  860 */ 'h',    0,    0, DTANH,
    /*  864 */ 'o',  888,  868, 0,
    /*  868 */ 's',    0,  872, 0,
    /*  872 */ 'h',    0,  876, 0,
    /*  876 */ 'i',    0,  880, 0,
    /*  880 */ 'f',    0,  884, 0,
    /*  884 */ 't',    0,    0, EOSHIFT,
    /*  888 */ 'p',  912,  892, 0,
    /*  892 */ 's',    0,  896, 0,
    /*  896 */ 'i',    0,  900, 0,
    /*  900 */ 'l',    0,  904, 0,
    /*  904 */ 'o',    0,  908, 0,
    /*  908 */ 'n',    0,    0, EPSILON,
    /*  912 */ 'x',    0,  916, 0,
    /*  916 */ 'p',    0,  920, EXP,
    /*  920 */ 'o',    0,  924, 0,
    /*  924 */ 'n',    0,  928, 0,
    /*  928 */ 'e',    0,  932, 0,
    /*  932 */ 'n',    0,  936, 0,
    /*  936 */ 't',    0,    0, EXPONENT,
    /*  940 */ 'l',  964,  944, 0,
    /*  944 */ 'o',    0,  948, 0,
    /*  948 */ 'a',  956,  952, 0,
    /*  952 */ 't',    0,    0, FLOAT,
    /*  956 */ 'o',    0,  960, 0,
    /*  960 */ 'r',    0,    0, FLOOR,
    /*  964 */ 'r',    0,  968, 0,
    /*  968 */ 'a',    0,  972, 0,
    /*  972 */ 'c',    0,  976, 0,
    /*  976 */ 't',    0,  980, 0,
    /*  980 */ 'i',    0,  984, 0,
    /*  984 */ 'o',    0,  988, 0,
    /*  988 */ 'n',    0,    0, FRACTION,
    /*  992 */ 'u',    0,  996, 0,
    /*  996 */ 'g',    0, 1000, 0,
    /* 1000 */ 'e',    0,    0, HUGE,
    /* 1004 */ 'a', 1040, 1008, 0,
    /* 1008 */ 'b', 1016, 1012, 0,
    /* 1012 */ 's',    0,    0, IABS,
    /* 1016 */ 'c', 1032, 1020, 0,
    /* 1020 */ 'h',    0, 1024, 0,
    /* 1024 */ 'a',    0, 1028, 0,
    /* 1028 */ 'r',    0,    0, IACHAR,
    /* 1032 */ 'n',    0, 1036, 0,
    /* 1036 */ 'd',    0,    0, IAND,
    /* 1040 */ 'b', 1080, 1044, 0,
    /* 1044 */ 'c', 1056, 1048, 0,
    /* 1048 */ 'l',    0, 1052, 0,
    /* 1052 */ 'r',    0,    0, IBCLR,
    /* 1056 */ 'i', 1068, 1060, 0,
    /* 1060 */ 't',    0, 1064, 0,
    /* 1064 */ 's',    0,    0, IBITS,
    /* 1068 */ 's',    0, 1072, 0,
    /* 1072 */ 'e',    0, 1076, 0,
    /* 1076 */ 't',    0,    0, IBSET,
    /* 1080 */ 'c', 1096, 1084, 0,
    /* 1084 */ 'h',    0, 1088, 0,
    /* 1088 */ 'a',    0, 1092, 0,
    /* 1092 */ 'r',    0,    0, ICHAR,
    /* 1096 */ 'd', 1144, 1100, 0,
    /* 1100 */ 'i', 1108, 1104, 0,
    /* 1104 */ 'm', 1120,    0, IDIM,
    /* 1108 */ 'f', 1128, 1112, 0,
    /* 1112 */ 'i',    0, 1116, 0,
    /* 1116 */ 'x',    0,    0, IDFIX,
    /* 1120 */ 'n',    0, 1124, 0,
    /* 1124 */ 't',    0,    0, IDINT,
    /* 1128 */ 'n',    0, 1132, 0,
    /* 1132 */ 'i',    0, 1136, 0,
    /* 1136 */ 'n',    0, 1140, 0,
    /* 1140 */ 't',    0,    0, IDNINT,
    /* 1144 */ 'e', 1156, 1148, 0,
    /* 1148 */ 'o',    0, 1152, 0,
    /* 1152 */ 'r',    0,    0, IEOR,
    /* 1156 */ 'f', 1168, 1160, 0,
    /* 1160 */ 'i',    0, 1164, 0,
    /* 1164 */ 'x',    0,    0, IFIX,
    /* 1168 */ 'n', 1188, 1172, 0,
    /* 1172 */ 'd', 1184, 1176, 0,
    /* 1176 */ 'e',    0, 1180, 0,
    /* 1180 */ 'x',    0,    0, INDEX,
    /* 1184 */ 't',    0,    0, INT,
    /* 1188 */ 'o', 1196, 1192, 0,
    /* 1192 */ 'r',    0,    0, IOR,
    /* 1196 */ 's',    0, 1200, 0,
    /* 1200 */ 'h', 1216, 1204, 0,
    /* 1204 */ 'f',    0, 1208, 0,
    /* 1208 */ 't',    0, 1212, ISHFT,
    /* 1212 */ 'c',    0,    0, ISHFTC,
    /* 1216 */ 'i',    0, 1220, 0,
    /* 1220 */ 'g',    0, 1224, 0,
    /* 1224 */ 'n',    0,    0, ISIGN,
    /* 1228 */ 'i',    0, 1232, 0,
    /* 1232 */ 'n',    0, 1236, 0,
    /* 1236 */ 'd',    0,    0, KIND,
    /* 1240 */ 'b', 1260, 1244, 0,
    /* 1244 */ 'o',    0, 1248, 0,
    /* 1248 */ 'u',    0, 1252, 0,
    /* 1252 */ 'n',    0, 1256, 0,
    /* 1256 */ 'd',    0,    0, LBOUND,
    /* 1260 */ 'e', 1288, 1264, 0,
    /* 1264 */ 'n',    0, 1268, LEN,
    /* 1268 */ '_',    0, 1272, 0,
    /* 1272 */ 't',    0, 1276, 0,
    /* 1276 */ 'r',    0, 1280, 0,
    /* 1280 */ 'i',    0, 1284, 0,
    /* 1284 */ 'm',    0,    0, LEN_TRIM,
    /* 1288 */ 'g', 1300, 1292, 0,
    /* 1292 */ 'e', 1296,    0, LGE,
    /* 1296 */ 't',    0,    0, LGT,
    /* 1300 */ 'l', 1312, 1304, 0,
    /* 1304 */ 'e', 1308,    0, LLE,
    /* 1308 */ 't',    0,    0, LLT,
    /* 1312 */ 'o',    0, 1316, 0,
    /* 1316 */ 'g',    0, 1320, LOG,
    /* 1320 */ '1', 1328, 1324, 0,
    /* 1324 */ '0',    0,    0, LOG10,
    /* 1328 */ 'i',    0, 1332, 0,
    /* 1332 */ 'c',    0, 1336, 0,
    /* 1336 */ 'a',    0, 1340, 0,
    /* 1340 */ 'l',    0,    0, LOGICAL,
    /* 1344 */ 'a', 1432, 1348, 0,
    /* 1348 */ 't', 1364, 1352, 0,
    /* 1352 */ 'm',    0, 1356, 0,
    /* 1356 */ 'u',    0, 1360, 0,
    /* 1360 */ 'l',    0,    0, MATMUL,
    /* 1364 */ 'x',    0, 1368, MAX,
    /* 1368 */ '0', 1372,    0, MAX0,
    /* 1372 */ '1', 1376,    0, MAX1,
    /* 1376 */ 'e', 1408, 1380, 0,
    /* 1380 */ 'x',    0, 1384, 0,
    /* 1384 */ 'p',    0, 1388, 0,
    /* 1388 */ 'o',    0, 1392, 0,
    /* 1392 */ 'n',    0, 1396, 0,
    /* 1396 */ 'e',    0, 1400, 0,
    /* 1400 */ 'n',    0, 1404, 0,
    /* 1404 */ 't',    0,    0, MAXEXPONENT,
    /* 1408 */ 'l', 1420, 1412, 0,
    /* 1412 */ 'o',    0, 1416, 0,
    /* 1416 */ 'c',    0,    0, MAXLOC,
    /* 1420 */ 'v',    0, 1424, 0,
    /* 1424 */ 'a',    0, 1428, 0,
    /* 1428 */ 'l',    0,    0, MAXVAL,
    /* 1432 */ 'e', 1448, 1436, 0,
    /* 1436 */ 'r',    0, 1440, 0,
    /* 1440 */ 'g',    0, 1444, 0,
    /* 1444 */ 'e',    0,    0, MERGE,
    /* 1448 */ 'i', 1520, 1452, 0,
    /* 1452 */ 'n',    0, 1456, MIN,
    /* 1456 */ '0', 1460,    0, MIN0,
    /* 1460 */ '1', 1464,    0, MIN1,
    /* 1464 */ 'e', 1496, 1468, 0,
    /* 1468 */ 'x',    0, 1472, 0,
    /* 1472 */ 'p',    0, 1476, 0,
    /* 1476 */ 'o',    0, 1480, 0,
    /* 1480 */ 'n',    0, 1484, 0,
    /* 1484 */ 'e',    0, 1488, 0,
    /* 1488 */ 'n',    0, 1492, 0,
    /* 1492 */ 't',    0,    0, MINEXPONENT,
    /* 1496 */ 'l', 1508, 1500, 0,
    /* 1500 */ 'o',    0, 1504, 0,
    /* 1504 */ 'c',    0,    0, MINLOC,
    /* 1508 */ 'v',    0, 1512, 0,
    /* 1512 */ 'a',    0, 1516, 0,
    /* 1516 */ 'l',    0,    0, MINVAL,
    /* 1520 */ 'o',    0, 1524, 0,
    /* 1524 */ 'd',    0, 1528, MOD,
    /* 1528 */ 'u',    0, 1532, 0,
    /* 1532 */ 'l',    0, 1536, 0,
    /* 1536 */ 'o',    0,    0, MODULO,
    /* 1540 */ 'e', 1564, 1544, 0,
    /* 1544 */ 'a',    0, 1548, 0,
    /* 1548 */ 'r',    0, 1552, 0,
    /* 1552 */ 'e',    0, 1556, 0,
    /* 1556 */ 's',    0, 1560, 0,
    /* 1560 */ 't',    0,    0, NEAREST,
    /* 1564 */ 'i', 1576, 1568, 0,
    /* 1568 */ 'n',    0, 1572, 0,
    /* 1572 */ 't',    0,    0, NINT,
    /* 1576 */ 'o', 1584, 1580, 0,
    /* 1580 */ 't',    0,    0, NOT,
    /* 1584 */ 'u',    0, 1588, 0,
    /* 1588 */ 'l',    0, 1592, 0,
    /* 1592 */ 'l',    0,    0, NULL,
    /* 1596 */ 'a', 1608, 1600, 0,
    /* 1600 */ 'c',    0, 1604, 0,
    /* 1604 */ 'k',    0,    0, PACK,
    /* 1608 */ 'r',    0, 1612, 0,
    /* 1612 */ 'e', 1656, 1616, 0,
    /* 1616 */ 'c', 1640, 1620, 0,
    /* 1620 */ 'i',    0, 1624, 0,
    /* 1624 */ 's',    0, 1628, 0,
    /* 1628 */ 'i',    0, 1632, 0,
    /* 1632 */ 'o',    0, 1636, 0,
    /* 1636 */ 'n',    0,    0, PRECISION,
    /* 1640 */ 's',    0, 1644, 0,
    /* 1644 */ 'e',    0, 1648, 0,
    /* 1648 */ 'n',    0, 1652, 0,
    /* 1652 */ 't',    0,    0, PRESENT,
    /* 1656 */ 'o',    0, 1660, 0,
    /* 1660 */ 'd',    0, 1664, 0,
    /* 1664 */ 'u',    0, 1668, 0,
    /* 1668 */ 'c',    0, 1672, 0,
    /* 1672 */ 't',    0,    0, PRODUCT,
    /* 1676 */ 'a', 1704, 1680, 0,
    /* 1680 */ 'd', 1692, 1684, 0,
    /* 1684 */ 'i',    0, 1688, 0,
    /* 1688 */ 'x',    0,    0, RADIX,
    /* 1692 */ 'n',    0, 1696, 0,
    /* 1696 */ 'g',    0, 1700, 0,
    /* 1700 */ 'e',    0,    0, RANGE,
    /* 1704 */ 'e', 1752, 1708, 0,
    /* 1708 */ 'a', 1716, 1712, 0,
    /* 1712 */ 'l',    0,    0, REAL,
    /* 1716 */ 'p', 1732, 1720, 0,
    /* 1720 */ 'e',    0, 1724, 0,
    /* 1724 */ 'a',    0, 1728, 0,
    /* 1728 */ 't',    0,    0, REPEAT,
    /* 1732 */ 's',    0, 1736, 0,
    /* 1736 */ 'h',    0, 1740, 0,
    /* 1740 */ 'a',    0, 1744, 0,
    /* 1744 */ 'p',    0, 1748, 0,
    /* 1748 */ 'e',    0,    0, RESHAPE,
    /* 1752 */ 'r',    0, 1756, 0,
    /* 1756 */ 's',    0, 1760, 0,
    /* 1760 */ 'p',    0, 1764, 0,
    /* 1764 */ 'a',    0, 1768, 0,
    /* 1768 */ 'c',    0, 1772, 0,
    /* 1772 */ 'i',    0, 1776, 0,
    /* 1776 */ 'n',    0, 1780, 0,
    /* 1780 */ 'g',    0,    0, RRSPACING,
    /* 1784 */ 'c', 1804, 1788, 0,
    /* 1788 */ 'a',    0, 1792, 0,
    /* 1792 */ 'l', 1800, 1796, 0,
    /* 1796 */ 'e',    0,    0, SCALE,
    /* 1800 */ 'n',    0,    0, SCAN,
    /* 1804 */ 'e', 1944, 1808, 0,
    /* 1808 */ 'l', 1904, 1812, 0,
    /* 1812 */ 'e',    0, 1816, 0,
    /* 1816 */ 'c',    0, 1820, 0,
    /* 1820 */ 't',    0, 1824, 0,
    /* 1824 */ 'e',    0, 1828, 0,
    /* 1828 */ 'd',    0, 1832, 0,
    /* 1832 */ '_',    0, 1836, 0,
    /* 1836 */ 'i', 1868, 1840, 0,
    /* 1840 */ 'n',    0, 1844, 0,
    /* 1844 */ 't',    0, 1848, 0,
    /* 1848 */ '_',    0, 1852, 0,
    /* 1852 */ 'k',    0, 1856, 0,
    /* 1856 */ 'i',    0, 1860, 0,
    /* 1860 */ 'n',    0, 1864, 0,
    /* 1864 */ 'd',    0,    0, SELECTED_INT_KIND,
    /* 1868 */ 'r',    0, 1872, 0,
    /* 1872 */ 'e',    0, 1876, 0,
    /* 1876 */ 'a',    0, 1880, 0,
    /* 1880 */ 'l',    0, 1884, 0,
    /* 1884 */ '_',    0, 1888, 0,
    /* 1888 */ 'k',    0, 1892, 0,
    /* 1892 */ 'i',    0, 1896, 0,
    /* 1896 */ 'n',    0, 1900, 0,
    /* 1900 */ 'd',    0,    0, SELECTED_REAL_KIND,
    /* 1904 */ 't',    0, 1908, 0,
    /* 1908 */ '_',    0, 1912, 0,
    /* 1912 */ 'e',    0, 1916, 0,
    /* 1916 */ 'x',    0, 1920, 0,
    /* 1920 */ 'p',    0, 1924, 0,
    /* 1924 */ 'o',    0, 1928, 0,
    /* 1928 */ 'n',    0, 1932, 0,
    /* 1932 */ 'e',    0, 1936, 0,
    /* 1936 */ 'n',    0, 1940, 0,
    /* 1940 */ 't',    0,    0, SET_EXPONENT,
    /* 1944 */ 'h', 1960, 1948, 0,
    /* 1948 */ 'a',    0, 1952, 0,
    /* 1952 */ 'p',    0, 1956, 0,
    /* 1956 */ 'e',    0,    0, SHAPE,
    /* 1960 */ 'i', 1988, 1964, 0,
    /* 1964 */ 'g', 1972, 1968, 0,
    /* 1968 */ 'n',    0,    0, SIGN,
    /* 1972 */ 'n', 1980, 1976, SIN,
    /* 1976 */ 'h',    0,    0, SINH,
    /* 1980 */ 'z',    0, 1984, 0,
    /* 1984 */ 'e',    0,    0, SIZE,
    /* 1988 */ 'n', 2000, 1992, 0,
    /* 1992 */ 'g',    0, 1996, 0,
    /* 1996 */ 'l',    0,    0, SNGL,
    /* 2000 */ 'p', 2040, 2004, 0,
    /* 2004 */ 'a', 2024, 2008, 0,
    /* 2008 */ 'c',    0, 2012, 0,
    /* 2012 */ 'i',    0, 2016, 0,
    /* 2016 */ 'n',    0, 2020, 0,
    /* 2020 */ 'g',    0,    0, SPACING,
    /* 2024 */ 'r',    0, 2028, 0,
    /* 2028 */ 'e',    0, 2032, 0,
    /* 2032 */ 'a',    0, 2036, 0,
    /* 2036 */ 'd',    0,    0, SPREAD,
    /* 2040 */ 'q', 2052, 2044, 0,
    /* 2044 */ 'r',    0, 2048, 0,
    /* 2048 */ 't',    0,    0, SQRT,
    /* 2052 */ 'u',    0, 2056, 0,
    /* 2056 */ 'm',    0,    0, SUM,
    /* 2060 */ 'a', 2072, 2064, 0,
    /* 2064 */ 'n',    0, 2068, TAN,
    /* 2068 */ 'h',    0,    0, TANH,
    /* 2072 */ 'i', 2084, 2076, 0,
    /* 2076 */ 'n',    0, 2080, 0,
    /* 2080 */ 'y',    0,    0, TINY,
    /* 2084 */ 'r',    0, 2088, 0,
    /* 2088 */ 'a',    0, 2092, 0,
    /* 2092 */ 'n',    0, 2096, 0,
    /* 2096 */ 's',    0, 2100, 0,
    /* 2100 */ 'f', 2112, 2104, 0,
    /* 2104 */ 'e',    0, 2108, 0,
    /* 2108 */ 'r',    0,    0, TRANSFER,
    /* 2112 */ 'p',    0, 2116, 0,
    /* 2116 */ 'o',    0, 2120, 0,
    /* 2120 */ 's',    0, 2124, 0,
    /* 2124 */ 'e',    0,    0, TRANSPOSE,
    /* 2128 */ 'b', 2148, 2132, 0,
    /* 2132 */ 'o',    0, 2136, 0,
    /* 2136 */ 'u',    0, 2140, 0,
    /* 2140 */ 'n',    0, 2144, 0,
    /* 2144 */ 'd',    0,    0, UBOUND,
    /* 2148 */ 'n',    0, 2152, 0,
    /* 2152 */ 'p',    0, 2156, 0,
    /* 2156 */ 'a',    0, 2160, 0,
    /* 2160 */ 'c',    0, 2164, 0,
    /* 2164 */ 'k',    0,    0, UNPACK,
    /* 2168 */ 'e',    0, 2172, 0,
    /* 2172 */ 'r',    0, 2176, 0,
    /* 2176 */ 'i',    0, 2180, 0,
    /* 2180 */ 'f',    0, 2184, 0,
    /* 2184 */ 'y',    0,    0, VERIFY,
  };

  /**
   * Return the index of the intrinsic referenced.
   * If the name is not an intrinsic name, return <code>NA</a>.
   * @param name is the intrinsic name
   * @param l is the number of characters in name to check
   */
  public static int lookup(String name, int l)
  {
    char lc = Character.toLowerCase(name.charAt(0));
    if ((lc < 'a') || (lc > 'z'))
      return 0;

    char ptr  = firstChar[lc - 'a'];
    int  lptr = 0;
    for (int pos = 1; pos < l; pos++) {
      if (ptr == 0)
        return 0;

      lc = name.charAt(pos);
      if ((lc != '_') && ((lc < 'a') || (lc > 'z'))) {
        if ((pos != (l - 1)) && (lc != '0') && (lc != '1'))
          return 0;
      }

      while (lc != bag[ptr]) {
        ptr = bag[ptr + 1];
        if (ptr == 0)
          return 0;
      }

      lptr = ptr;
      ptr = bag[ptr + 2];
    }

    return bag[lptr + 3];
  }

}
