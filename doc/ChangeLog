2012-5-1
首先定义工程目录为：SCALERELEASE = scale

$(SCALERELEASE)/scale/frontend/c/c99.g:
iterationStatement
<
...|f:KEYWORD_for LParen (...)(expr2=expression)? Semi (expr3=expression)? RParen istmt=statement
{stmt = buildForStmt (expr1, expr2, expr3. istmt, f)}
---
>
...|f:KEYWORD_for LParen (...)(expr2=expression)? Semi (expr3=expression)? RParen ((KEYWORD_clone)=> KEYWORD_clone LParen exprThdNum=expression RParen)? istmt=statement
stmt = ((exprThdNum == null) ? buildForStmt (expr1, expr2, expr3, istmt, f) : buildCloneForStmt (expr1, expr2, expr3, istmt, f, exprThdNum));
然后添加了KEYWORD_clone的定义：KEYWORD_clone = "__CLONE_beta"（目前是测试版）和buildForCloneForStmt的定义。

$(SCALERELEASE)/scale/clef/StmtPredicate.java:
添加对CloneForLoopStmt节点的访问接口：
public void visitCloneForLoopStmt(CloneForLoopStmt n);
由于StmtPredicate是一个顶层interface，其中的method都只声明不实现。

$(SCALERELEASE)/scale/clef/DescendPredicate.java:
添加对CloneForLoopStmt节点的访问接口：
public void visitCloneForLoopStmt(CloneForLoopStmt n)	{ visitTestLoopStmt(n); }

以上两个接口都为以后upcasting的Predicte类型对象访问visitCloneForLoopStmt打基础。

此外，还要分别在$(SCALERELEASE)/scale/clef/Clef2C.java和$(SCALERELEASE)/scale/clef2scribble.java中添加对visitCloneForLoopStmt的实现，因为它们直接或间接的继承了Predicate，目前里面还没有添加任何操作。



